from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
import json
import nest_asyncio
import os

# –ü—Ä–∏–º–µ–Ω—è–µ–º nest_asyncio –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ Google Colab
nest_asyncio.apply()

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫
DATA_FILE = "orders.json"

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±—Ä–æ–Ω–µ–π
BOOKINGS_FILE = "bookings.json"

# –§–æ—Ä–º—É–ª—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
MATERIAL_FORMULAS = {
    "–û–±—ã—á–Ω—ã–µ –æ–±–æ–∏": lambda area: round(area / 5),  # 1 —Ä—É–ª–æ–Ω –Ω–∞ 5 –º¬≤, –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
    "–û–±–æ–∏ —Å —Å–æ–≤–º–µ—â–µ–Ω–∏–µ–º —Ä–∏—Å—É–Ω–∫–∞": lambda area: round(area / 4),  # 1 —Ä—É–ª–æ–Ω –Ω–∞ 4 –º¬≤, –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
    "–ö–ª–µ–π –æ–±–æ–π–Ω—ã–π": lambda area: area / 20,  # 1 –ø–∞—á–∫–∞ –∫–ª–µ—è –Ω–∞ 20 –º¬≤
    "–ö—Ä–∞—Å–∫–∞ –≤–æ–¥–æ–¥–∏—Å–ø–µ—Ä—Å–Ω–∞—è": lambda area: area * 0.3 * 3,  # 0.3 –ª–∏—Ç—Ä–∞ –Ω–∞ –º¬≤ √ó 3 —Å–ª–æ—è
    "–£–∫—Ä—ã–≤–Ω–∞—è –ø–ª—ë–Ω–∫–∞": lambda area: area * 1.2,  # 1.2 —Ä—É–ª–æ–Ω–∞ –Ω–∞ –º¬≤
    "–ì—Ä—É–Ω—Ç–æ–≤–∫–∞": lambda area: area / 10,  # 1 –ª–∏—Ç—Ä –Ω–∞ 10 –º¬≤
    "–°–∫–æ—Ç—á –º–∞–ª—è—Ä–Ω—ã–π": lambda perimeter: perimeter * 1.1,  # 1.1 —Ä—É–ª–æ–Ω–∞ –Ω–∞ –º–µ—Ç—Ä –ø–µ—Ä–∏–º–µ—Ç—Ä–∞
    "–ü–ª–∏–Ω—Ç—É—Å –ø–æ—Ç–æ–ª–æ—á–Ω—ã–π": lambda perimeter: perimeter * 1.05,  # 1.05 –º–µ—Ç—Ä–∞ –ø–ª–∏–Ω—Ç—É—Å–∞ –Ω–∞ –º–µ—Ç—Ä –ø–µ—Ä–∏–º–µ—Ç—Ä–∞
    "–ñ–∏–¥–∫–∏–µ –≥–≤–æ–∑–¥–∏": lambda perimeter: perimeter * 0.05  # 0.05 –ª–∏—Ç—Ä–æ–≤ –∂–∏–¥–∫–∏—Ö –≥–≤–æ–∑–¥–µ–π –Ω–∞ –º–µ—Ç—Ä –ø–µ—Ä–∏–º–µ—Ç—Ä–∞
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["–ü—Ä–∞–π—Å-–ª–∏—Å—Ç üìù", "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å üí≥"],
        ["–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞—Å—Ç–µ—Ä–æ–º üìû", "–û –º–∞—Å—Ç–µ—Ä–µ üë®‚Äçüíº"],
        ["–†–∞—Å—á—ë—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ üõ†Ô∏è", "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å üìÖ"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# –ü—Ä–∞–π—Å-–ª–∏—Å—Ç
async def price_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prices = """
–ü—Ä–∞–π—Å-–ª–∏—Å—Ç:
‚Ä¢ –ü–æ–∫–ª–µ–π–∫–∞ –æ–±–æ–µ–≤ ‚Äî 400 ‚ÇΩ –∑–∞ –º¬≤ (–æ–±—ã—á–Ω—ã–µ), 450 ‚ÇΩ –∑–∞ –º¬≤ (—Å —Å–æ–≤–º–µ—â–µ–Ω–∏–µ–º —Ä–∏—Å—É–Ω–∫–∞)
‚Ä¢ –ü–æ–∫—Ä–∞—Å–∫–∞ —Å—Ç–µ–Ω ‚Äî 400 ‚ÇΩ –∑–∞ –º¬≤
‚Ä¢ –ü–æ–∫—Ä–∞—Å–∫–∞ –ø–æ—Ç–æ–ª–∫–æ–≤ ‚Äî 450 ‚ÇΩ –∑–∞ –º¬≤
‚Ä¢ –î–µ–º–æ–Ω—Ç–∞–∂ –æ–±–æ–µ–≤ ‚Äî 160 ‚ÇΩ
‚Ä¢ –ü–æ–∫—Ä–∞—Å–∫–∞ —Å—Ç–µ–Ω –≤ –¥–≤–∞ —Å–ª–æ—è ‚Äî 400 ‚ÇΩ
‚Ä¢ –ü–æ–∫—Ä–∞—Å–∫–∞ –ø–æ—Ç–æ–ª–∫–∞ –≤ –¥–≤–∞ —Å–ª–æ—è ‚Äî 450 ‚ÇΩ –∑–∞ –º¬≤
‚Ä¢ –ü–æ–∫—Ä–∞—Å–∫–∞ –ø–æ–ª–æ–≤ ‚Äî –æ—Ç 400 ‚ÇΩ
‚Ä¢ –û–≥—Ä—É–Ω—Ç–æ–≤–∫–∞ —Å—Ç–µ–Ω ‚Äî 160 ‚ÇΩ –∑–∞ –º¬≤
‚Ä¢ –û–≥—Ä—É–Ω—Ç–æ–≤–∫–∞ –ø–æ—Ç–æ–ª–∫–æ–≤ ‚Äî 160 ‚ÇΩ –∑–∞ –º¬≤
‚Ä¢ –ü–æ–∫—Ä–∞—Å–∫–∞ –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥–Ω—ã—Ö —Ç—Ä—É–± ‚Äî 500 ‚ÇΩ –∑–∞ –µ–¥.
‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π ‚Äî –æ—Ç 400 ‚ÇΩ –∑–∞ –º¬≤
‚Ä¢ –ü–æ–∫–ª–µ–π–∫–∞ —Ñ–æ—Ç–æ–æ–±–æ–µ–≤ ‚Äî –æ—Ç 450 ‚ÇΩ –∑–∞ –º¬≤
‚Ä¢ –ù–∞–Ω–µ—Å–µ–Ω–∏–µ —Ñ—Ä–µ—Å–æ–∫ ‚Äî –æ—Ç 1 000 ‚ÇΩ –∑–∞ –º¬≤
‚Ä¢ –ü–æ–∫–ª–µ–π–∫–∞ —Å—Ç–µ–∫–ª–æ–æ–±–æ–µ–≤ ‚Äî –æ—Ç 600 ‚ÇΩ –∑–∞ –º¬≤
"""
    await update.message.reply_text(prices)

# –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å
async def calculate_cost(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–û–±—ã—á–Ω—ã–µ –æ–±–æ–∏ ü™ú", callback_data="cost_wallpaper_regular")],
        [InlineKeyboardButton("–û–±–æ–∏ —Å —Å–æ–≤–º–µ—â–µ–Ω–∏–µ–º —Ä–∏—Å—É–Ω–∫–∞ ü™ú", callback_data="cost_wallpaper_pattern")],
        [InlineKeyboardButton("–ü–æ–∫—Ä–∞—Å–∫–∞ —Å—Ç–µ–Ω üñåÔ∏è", callback_data="cost_paint_walls")],
        [InlineKeyboardButton("–ü–æ–∫—Ä–∞—Å–∫–∞ –ø–æ—Ç–æ–ª–∫–æ–≤ üñåÔ∏è", callback_data="cost_paint_ceilings")],
        [InlineKeyboardButton("–î—Ä—É–≥–∞—è —É—Å–ª—É–≥–∞", callback_data="cost_other_service")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
async def cost_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    service = query.data

    if service == "cost_wallpaper_regular":
        context.user_data['service'] = "–ü–æ–∫–ª–µ–π–∫–∞ –æ–±—ã—á–Ω—ã—Ö –æ–±–æ–µ–≤"
        context.user_data['price_per_unit'] = 400
    elif service == "cost_wallpaper_pattern":
        context.user_data['service'] = "–ü–æ–∫–ª–µ–π–∫–∞ –æ–±–æ–µ–≤ —Å —Å–æ–≤–º–µ—â–µ–Ω–∏–µ–º —Ä–∏—Å—É–Ω–∫–∞"
        context.user_data['price_per_unit'] = 450
    elif service == "cost_paint_walls":
        context.user_data['service'] = "–ü–æ–∫—Ä–∞—Å–∫–∞ —Å—Ç–µ–Ω"
        context.user_data['price_per_unit'] = 400
    elif service == "cost_paint_ceilings":
        context.user_data['service'] = "–ü–æ–∫—Ä–∞—Å–∫–∞ –ø–æ—Ç–æ–ª–∫–æ–≤"
        context.user_data['price_per_unit'] = 450
    else:
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ "–î—Ä—É–≥–∞—è —É—Å–ª—É–≥–∞", –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp üì±", url="https://wa.me/79235194888")],
            [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram üì≤", url="https://t.me/remont42kemerovo")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("""
–í—ã–±—Ä–∞–Ω–∞ –¥—Ä—É–≥–∞—è —É—Å–ª—É–≥–∞. –£—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ —É –º–∞—Å—Ç–µ—Ä–∞:
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω/WhatsApp: +7 (923) 519-48-88
‚Ä¢ Telegram: @remont42kemerovo
""",
            reply_markup=reply_markup
        )
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–ª–æ—â–∞–¥—å —Å—Ç–µ–Ω
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å —Å—Ç–µ–Ω –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20).")
    context.user_data['step'] = "area"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
async def handle_cost_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text

    if 'step' not in context.user_data:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    try:
        area = float(user_input)
        service = context.user_data['service']
        price_per_unit = context.user_data['price_per_unit']
        cost = area * price_per_unit
        await update.message.reply_text(f"–°—Ç–æ–∏–º–æ—Å—Ç—å {service} —Å–æ—Å—Ç–∞–≤–∏—Ç: {cost} ‚ÇΩ.")
        save_order(update.message.from_user.username, service, cost)
        context.user_data.clear()
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
def save_order(username, service, cost):
    try:
        with open(DATA_FILE, "r") as file:
            data = json.load(file)
    except FileNotFoundError:
        data = []

    order = {
        "username": username,
        "service": service,
        "cost": cost
    }
    data.append(order)

    with open(DATA_FILE, "w") as file:
        json.dump(data, file, indent=4)

# –†–∞—Å—á—ë—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
async def calculate_materials(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–û–±—ã—á–Ω—ã–µ –æ–±–æ–∏ ü™ú", callback_data="materials_wallpaper_regular")],
        [InlineKeyboardButton("–û–±–æ–∏ —Å —Å–æ–≤–º–µ—â–µ–Ω–∏–µ–º —Ä–∏—Å—É–Ω–∫–∞ ü™ú", callback_data="materials_wallpaper_pattern")],
        [InlineKeyboardButton("–ö–ª–µ–π –æ–±–æ–π–Ω—ã–π ü™õ", callback_data="materials_glue")],
        [InlineKeyboardButton("–ö—Ä–∞—Å–∫–∞ –≤–æ–¥–æ–¥–∏—Å–ø–µ—Ä—Å–Ω–∞—è üö∞", callback_data="materials_paint")],
        [InlineKeyboardButton("–£–∫—Ä—ã–≤–Ω–∞—è –ø–ª—ë–Ω–∫–∞ üåø", callback_data="materials_film")],
        [InlineKeyboardButton("–ì—Ä—É–Ω—Ç–æ–≤–∫–∞ ü™≤", callback_data="materials_primer")],
        [InlineKeyboardButton("–°–∫–æ—Ç—á –º–∞–ª—è—Ä–Ω—ã–π ü™ù", callback_data="materials_tape")],
        [InlineKeyboardButton("–ü–ª–∏–Ω—Ç—É—Å –ø–æ—Ç–æ–ª–æ—á–Ω—ã–π ü™ó", callback_data="materials_plinth")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
async def materials_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    material = query.data

    if material == "materials_wallpaper_regular":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å —Å—Ç–µ–Ω –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20).")
        context.user_data['material'] = "–û–±—ã—á–Ω—ã–µ –æ–±–æ–∏"
        context.user_data['step'] = "area"
    elif material == "materials_wallpaper_pattern":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å —Å—Ç–µ–Ω –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20).")
        context.user_data['material'] = "–û–±–æ–∏ —Å —Å–æ–≤–º–µ—â–µ–Ω–∏–µ–º —Ä–∏—Å—É–Ω–∫–∞"
        context.user_data['step'] = "area"
    elif material == "materials_glue":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å —Å—Ç–µ–Ω –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20).")
        context.user_data['material'] = "–ö–ª–µ–π –æ–±–æ–π–Ω—ã–π"
        context.user_data['step'] = "area"
    elif material == "materials_paint":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å —Å—Ç–µ–Ω –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20).")
        context.user_data['material'] = "–ö—Ä–∞—Å–∫–∞ –≤–æ–¥–æ–¥–∏—Å–ø–µ—Ä—Å–Ω–∞—è"
        context.user_data['step'] = "area"
    elif material == "materials_film":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –ø–æ–ª–∞ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15).")
        context.user_data['material'] = "–£–∫—Ä—ã–≤–Ω–∞—è –ø–ª—ë–Ω–∫–∞"
        context.user_data['step'] = "floor_area"
    elif material == "materials_primer":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å —Å—Ç–µ–Ω –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20).")
        context.user_data['material'] = "–ì—Ä—É–Ω—Ç–æ–≤–∫–∞"
        context.user_data['step'] = "area"
    elif material == "materials_tape":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–º–µ—Ç—Ä –ø–æ–º–µ—â–µ–Ω–∏—è –≤ –º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10).")
        context.user_data['material'] = "–°–∫–æ—Ç—á –º–∞–ª—è—Ä–Ω—ã–π"
        context.user_data['step'] = "perimeter"
    elif material == "materials_plinth":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–º–µ—Ç—Ä –ø–æ–º–µ—â–µ–Ω–∏—è –≤ –º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10).")
        context.user_data['material'] = "–ü–ª–∏–Ω—Ç—É—Å –ø–æ—Ç–æ–ª–æ—á–Ω—ã–π"
        context.user_data['step'] = "perimeter"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
async def handle_materials_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text

    if 'step' not in context.user_data:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    try:
        value = float(user_input)
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    material = context.user_data['material']
    step = context.user_data['step']

    if step == "area":
        formula = MATERIAL_FORMULAS[material]
        result = formula(value)
        await update.message.reply_text(f"–î–ª—è {value} –º¬≤ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–º–µ—Ä–Ω–æ {result} –µ–¥–∏–Ω–∏—Ü {material}.")
    elif step == "floor_area":
        formula = MATERIAL_FORMULAS["–£–∫—Ä—ã–≤–Ω–∞—è –ø–ª—ë–Ω–∫–∞"]
        result = formula(value)
        await update.message.reply_text(f"–î–ª—è {value} –º¬≤ –ø–æ–ª–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–º–µ—Ä–Ω–æ {result:.1f} —Ä—É–ª–æ–Ω–æ–≤ —É–∫—Ä—ã–≤–Ω–æ–π –ø–ª—ë–Ω–∫–∏.")
    elif step == "perimeter":
        formula = MATERIAL_FORMULAS[material]
        result = formula(value)
        await update.message.reply_text(f"–î–ª—è {value} –º–µ—Ç—Ä–æ–≤ –ø–µ—Ä–∏–º–µ—Ç—Ä–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–º–µ—Ä–Ω–æ {result:.1f} –µ–¥–∏–Ω–∏—Ü {material}.")

    context.user_data.clear()

# –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å
async def book_service(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    context.user_data['step'] = "name"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
async def handle_booking_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text

    if 'step' not in context.user_data:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    step = context.user_data['step']

    if step == "name":
        context.user_data['name'] = user_input
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        context.user_data['step'] = "phone"
    elif step == "phone":
        context.user_data['phone'] = user_input
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:")
        context.user_data['step'] = "address"
    elif step == "address":
        context.user_data['address'] = user_input
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å —Å—Ç–µ–Ω –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20):")
        context.user_data['step'] = "area"
    elif step == "area":
        try:
            area = float(user_input)
            cost = area * 400  # –ü—Ä–∏–º–µ—Ä: 400 ‚ÇΩ –∑–∞ –º¬≤
            context.user_data['area'] = area
            context.user_data['cost'] = cost
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2023-10-15 14:00):")
            context.user_data['step'] = "datetime"
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    elif step == "datetime":
        datetime = user_input
        name = context.user_data['name']
        phone = context.user_data['phone']
        address = context.user_data['address']
        area = context.user_data['area']
        cost = context.user_data['cost']
        await update.message.reply_text(f"""
–ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!
–ò–º—è: {name}
–¢–µ–ª–µ—Ñ–æ–Ω: {phone}
–ê–¥—Ä–µ—Å: {address}
–ü–ª–æ—â–∞–¥—å —Å—Ç–µ–Ω: {area} –º¬≤
–°—Ç–æ–∏–º–æ—Å—Ç—å: {cost} ‚ÇΩ
–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {datetime}
""")
        save_booking(name, phone, address, area, cost, datetime)
        context.user_data.clear()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—Ä–æ–Ω–∏
def save_booking(name, phone, address, area, cost, datetime):
    try:
        with open(BOOKINGS_FILE, "r") as file:
            data = json.load(file)
    except FileNotFoundError:
        data = []

    booking = {
        "name": name,
        "phone": phone,
        "address": address,
        "area": area,
        "cost": cost,
        "datetime": datetime
    }
    data.append(booking)

    with open(BOOKINGS_FILE, "w") as file:
        json.dump(data, file, indent=4)

# –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞—Å—Ç–µ—Ä–æ–º
async def contact_master(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp üì±", url="https://wa.me/79235194888")],
        [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram üì≤", url="https://t.me/remont42kemerovo")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("""
–î–ª—è —Å–≤—è–∑–∏ —Å –º–∞—Å—Ç–µ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω/WhatsApp: +7 (923) 519-48-88
‚Ä¢ Telegram: @remont42kemerovo
""",
        reply_markup=reply_markup
    )

# –û –º–∞—Å—Ç–µ—Ä–µ
async def about_master(update: Update, context: ContextTypes.DEFAULT_TYPE):
    description = """
–ì–ê–†–ê–ù–¢–ò–†–£–Æ –ö–ê–ß–ï–°–¢–í–û! –û–ü–´–¢ 21 –ì–û–î –í –ö–ê–ß–ï–°–¢–í–ï–ù–ù–û–ô –ü–û–öRA
